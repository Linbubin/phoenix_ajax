$('.property.modal.content').html("<%= escape_javascript(render("form.html",
conn: @conn, changeset: @changeset, action: @action, property_classes: @property_classes)) %>");

$('.property.modal.actions').html("<%= escape_javascript(render("form_action.html", changeset: @changeset)) %>");

//Activate UI dropdown
$('select.dropdown').dropdown();
$('.ui.accordion').accordion();

//Semantic UI validations
$('#property-dialog').modal({
        onApprove : function() {
          //Submits the semantic ui form
          //And pass the handling responsibilities to the form handlers,
          // e.g. on form validation success
          $('.ui.property.form').form('validate form');
          //Return false as to not close modal dialog
          return false;
        }
    });


$('.ui.property.form').form({
  fields: {
      name: {
        identifier: 'property[name]',
        rules: [
          {
            type   : 'empty',
            prompt : 'Please enter the property name'
          }
        ]
      },
      purchase_price: {
        identifier : 'property[purchase_price]',
        optional   : true,
        rules: [
          {
            type   : 'number'
          }
        ]
      },
      number_of_units: {
        identifier : 'property[number_of_units]',
        optional   : true,
        rules: [
          {
            type   : 'integer'
          }
        ]
      },
      number_of_stories: {
        identifier : 'property[number_of_stories]',
        optional   : true,
        rules: [
          {
            type   : 'integer'
          }
        ]
      }
    },
  onSuccess: function() {
    console.log("onSuccess was called!");
    submitForm()
  }
});


function submitForm() {
  console.log("submitForm called");

  // get the form data
  // there are many ways to get this data using jQuery (you can use the class or id also)
  var form = $('#new-property-form')[0];
  console.log(form);
  var data = new FormData(form);
  console.log(data);
  var method = <%= if Ecto.Changeset.get_field(@changeset, :id) do %> 'PATCH' <% else %> 'POST' <% end %>
  // process the form
  $.ajax({
      type        : method, // define the type of HTTP verb we want to use (POST/PATCH for our form)
      url         : $('#new-property-form').attr('action')+"?_format=js", // the url where we want to POST
      data        : data ,// our data object
      contentType : false,
      processData : false,
      headers     : { "X-CSRF-TOKEN": $('input[name="_csrf_token"]').val() },
      dataType    : 'script', // what type of data do we expect back from the server
      encode      : true

  })
      // using the done promise callback
      .done(function(data) {

          // log data to the console so we can see
          console.log(data);

          // here we will handle errors and validation messages
      });

  // stop the form from submitting the normal way and refreshing the page
  return false
};
